{"version":3,"file":"static/js/840.5e7b756b.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactsList/ContactsList.styled.js","components/Utils/contactsAvatar.jsx","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Wraper = styled.div`\ndisplay: flex;\njustify-content: center;\n`\nexport const BoxContact = styled.div`\nmargin-top: 50px;\n\n`\nexport const FormStyled = styled(Form)`\n  float: left;\n  margin-right: 64px;\n`;\n\nexport const FieldStyled = styled(Field)`\n  display: block;\n  margin: 0 0 15px 0;\n  padding: 10px;\n  width: 250px;\n  border: 1px solid #ccc;\n`;\n\nexport const ErrorMessagetyled = styled(ErrorMessage)`\n  font-size: 12px;\n  margin-bottom: 16px;\n  color: red;\n`;\n\nexport const Label = styled.label`\n  font-size: 16px;\n  font-weight: bold;\n  color: #4a4848;\n`;\n\nexport const ButtonSubmit = styled.button`\n  padding: 10px 30px;\n  background: #f8a035;\n  color: #fff;\n  border: none;\n  border-radius: 6px;\n  &:hover {\n    background-color: orangered;\n  }\n`;","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  overflow: hidden;\n  border-left: 1px solid #ccc;\n  padding-bottom: 30px;\n`;\nexport const Link = styled.li`\n  list-style: none;\n`;\nexport const ButtonDelete = styled.button`\n  display: flex;\n  align-items: center;\n  width: 80px;\n  height: 30px;\n  padding: 10px;\n  background: #f8a035;\n  color: #fff;\n  border: none;\n  border-radius: 6px;\n  &:hover {\n    background-color: orangered;\n  }\n`;\nexport const TextStyled = styled.span`\n margin-left: 4px;\n `","function stringToColor(string) {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n}\n\nexport const stringAvatar = (name) => {\n  return {\n    sx: {\n      bgcolor: stringToColor(name),\n    },\n    children: `${name.split(' ')[0][0]}`,\n  };\n}\n","\nexport const getValue = state => state.filter;\nexport const getContacts = state => state.contacts\n","import { List, Link, ButtonDelete, TextStyled } from './ContactsList.styled';\nimport { stringAvatar } from '../Utils/contactsAvatar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getValue } from 'redux/contacts/selectors';\nimport { deleteContacts } from 'redux/contacts/operations';\nimport { MdDeleteForever } from 'react-icons/md';\nimport { toast } from 'react-hot-toast';\nimport { Avatar } from '@mui/material';\n\nconst ContactsList = () => {\n  const { items, isLoading, error } = useSelector(getContacts);\n  const filter = useSelector(getValue);\n  const dispatch = useDispatch();\n\n  const filterContacts = items.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleDelete = Id => {\n    dispatch(deleteContacts(Id));\n    toast.success('Ви видалили контакт!');\n  };\n\n  return (\n    <List>\n      {isLoading && <p>Loading contacts...</p>}\n      {error && <p>{error}</p>}\n\n      {filterContacts.map(({ id, name, number }) => (\n        <Link key={id}>\n          <div className=\"wraper\">\n            <div className=\"contact\">\n              <div className=\"contactWraper\">\n                <Avatar {...stringAvatar(`${name}`)} />\n                <h2 className=\"contactName\">{name}</h2>\n              </div>\n              <p>{number}</p>\n\n              <ButtonDelete type=\"button\" onClick={() => handleDelete(id)}>\n                <MdDeleteForever size={16} />\n                <TextStyled> Delete </TextStyled>\n              </ButtonDelete>\n            </div>\n          </div>\n        </Link>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactsList;\n","import {\n  FormStyled,\n  FieldStyled,\n  ErrorMessagetyled,\n  Label,\n  ButtonSubmit,\n} from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/operations';\nimport { toast } from 'react-hot-toast';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nlet schema = yup.object().shape({\n  name: yup.string().required('Name is required'),\n  number: yup.string().min(7).max(10).required('Phone number is required'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const { items } = useSelector(getContacts);\n\n  const submitForm = ({ name, number }, { resetForm }) => {\n    const nameContact = name;\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n    if (items.some(({ name }) => name === nameContact)) {\n      toast.error(`${nameContact} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContacts(newContact));\n    resetForm();\n    toast.success('You created a new contact');\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={submitForm}\n    >\n      <FormStyled autoComplete=\"on\">\n        <Label>\n          Name\n          <FieldStyled type=\"text\" name=\"name\" placeholder=\"Name *\" />\n          <ErrorMessagetyled name=\"name\" component=\"div\" />\n        </Label>\n\n        <Label>\n          Number\n          <FieldStyled type=\"tel\" name=\"number\" placeholder=\"Number *\" />\n          <ErrorMessagetyled component=\"div\" name=\"number\" />\n        </Label>\n\n        <ButtonSubmit type=\"submit\">Add contacts</ButtonSubmit>\n      </FormStyled>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  display: block;\n  margin: 0 0 15px 0;\n  padding: 10px;\n  width: 250px;\n  border: 1px solid #ccc;\n`;\n\n\nexport const Label = styled.label`\n  font-size: 16px;\n  font-weight: bold;\n  color: #4a4848;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { searchContact } from 'redux/contacts/filterSlice';\nimport { Input, Label } from './Filter.styled';\nimport { getValue } from 'redux/contacts/selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getValue);\n\n  const handelFilter = event => {\n    const value = event.target.value;\n    dispatch(searchContact(value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handelFilter}\n        placeholder=\"Find contacts\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n    </Label>\n  );\n}\n\nexport default Filter;\n","import { Wraper, BoxContact,} from '../components/ContactForm/ContactForm.styled';\nimport ContactsList from '../components/ContactsList/ContactsList';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm';\nimport { getContacts } from '../redux/contacts/selectors';\nimport Filter from 'components/Filter';\nimport { useEffect } from 'react';\n\nconst ContactPage = () => {\n  const dispatch = useDispatch();\n  const { isLoading, error } = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wraper>\n      <div>\n        <h1>Phonebook </h1>\n        <ContactForm />\n        {isLoading && !error && <b>Request in progress...</b>}\n      </div>\n\n      <BoxContact>\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList />\n      </BoxContact>\n    </Wraper>\n  );\n};\n\nexport default ContactPage;\n"],"names":["Wraper","styled","BoxContact","FormStyled","Form","FieldStyled","Field","ErrorMessagetyled","ErrorMessage","Label","ButtonSubmit","List","Link","ButtonDelete","TextStyled","stringToColor","string","i","hash","length","charCodeAt","color","toString","slice","stringAvatar","name","sx","bgcolor","children","split","getValue","state","filter","getContacts","contacts","useSelector","items","isLoading","error","dispatch","useDispatch","filterContacts","toLowerCase","includes","map","id","number","className","Avatar","type","onClick","Id","deleteContacts","toast","size","initialValues","schema","yup","shape","required","min","max","validationSchema","onSubmit","resetForm","nameContact","newContact","nanoid","some","addContacts","autoComplete","placeholder","component","Input","value","onChange","event","target","searchContact","pattern","title","useEffect","fetchContacts"],"sourceRoot":""}